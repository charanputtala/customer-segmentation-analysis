# -*- coding: utf-8 -*-
"""E-commerce Sales and Customer Insights Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u1xnpu-J_aVDT-uHfbQ4vMSg5yI32r4Y

**Load the Data set files and import necessary libraries**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
user_details = pd.read_csv('/content/user details.csv')
orders_list = pd.read_csv('/content/orders list.csv')
items = pd.read_csv('/content/items.csv')

# Display the first few rows of each dataframe
print("User Details:")
print(user_details.head(), "\n")

print("Orders List:")
print(orders_list.head(), "\n")

print("Items:")
print(items.head())

# Display the column names of each dataframe
print("User Details Columns:")
print(user_details.columns, "\n")

print("Orders List Columns:")
print(orders_list.columns, "\n")

print("Items Columns:")
print(items.columns)

print('There are ',user_details.shape[0],'rows and ', user_details.shape[1],'columns in the dataset.')

print('There are ',orders_list.shape[0],'rows and ', orders_list.shape[1],'columns in the dataset.')

print('There are ',items.shape[0],'rows and ', items.shape[1],'columns in the dataset.')

print('There are ',user_details.duplicated().sum(),'duplicate values in the dataset.')
#using duplicated() pre-defined function
print('There are ',orders_list.duplicated().sum(),'duplicate values in the dataset.')
#using duplicated() pre-defined function
print('There are ',items.duplicated().sum(),'duplicate values in the dataset.')
#using duplicated() pre-defined function

"""**Analyze Top Selling Items:**"""

# Merge orders and items dataframes to get sales volume and revenue
orders_items = pd.merge(orders_list, items, left_on='order_id', right_on='order_id_fk', how='left')

# Sales volume
top_selling_items = orders_items.groupby('item_name')['quantity'].sum().sort_values(ascending=False).head(10)
print("Top Selling Items by Volume:")
print(top_selling_items)

# Most frequently ordered items
most_frequent_items = orders_items['item_name'].value_counts().head(10)
print("\nMost Frequently Ordered Items:")
print(most_frequent_items)

# Visualization
plt.figure(figsize=(14, 7))
plt.subplot(1, 2, 1)
top_selling_items.plot(kind='bar', title='Top Selling Items by Volume')
plt.subplot(1, 2, 2)
most_frequent_items.plot(kind='bar', title='Most Frequently Ordered Items')
plt.tight_layout()
plt.show()

"""**Revenue Analysis**

We'll calculate the total revenue for each item and find out which items generate the most revenue. We'll also calculate the average price of items sold.
"""

# Calculate revenue for each item
orders_items['revenue'] = orders_items['quantity'] * orders_items['price']

# Top revenue generating items
top_revenue_items = orders_items.groupby('item_name')['revenue'].sum().sort_values(ascending=False).head(10)
print("\nTop Revenue Generating Items:")
print(top_revenue_items)

# Average price of items sold
average_price = orders_items['price'].mean()
print("\nAverage Price of Items Sold:", average_price)

# Visualization
plt.figure(figsize=(7, 7))
top_revenue_items.plot(kind='bar', title='Top Revenue Generating Items')
plt.tight_layout()
plt.show()

"""**Product Variety**

We'll find out the number of unique items and the most popular categories.
"""

# Number of unique items
unique_items_count = items['item_name'].nunique()
print("\nNumber of Unique Items:", unique_items_count)

# Most popular categories
popular_categories = items['product_id'].value_counts().head(10)
print("\nMost Popular Categories:")
print(popular_categories)

# Visualization
plt.figure(figsize=(7, 7))
popular_categories.plot(kind='bar', title='Most Popular Categories')
plt.tight_layout()
plt.show()

"""**Order Frequency and Value**

We'll analyze how many orders are placed per day/week/month and the peak ordering times/days.
"""

# Convert 'ordered_on' to datetime
orders_list['ordered_on'] = pd.to_datetime(orders_list['ordered_on'])

# Orders per day
orders_per_day = orders_list['ordered_on'].dt.date.value_counts().sort_index()
print("\nOrders Per Day:")
print(orders_per_day)

# Orders per week
orders_per_week = orders_list['ordered_on'].dt.to_period('W').value_counts().sort_index()
print("\nOrders Per Week:")
print(orders_per_week)

# Orders per month
orders_per_month = orders_list['ordered_on'].dt.to_period('M').value_counts().sort_index()
print("\nOrders Per Month:")
print(orders_per_month)

# Peak ordering times (hours of the day)
orders_per_hour = orders_list['ordered_on'].dt.hour.value_counts().sort_index()
print("\nPeak Ordering Times (Hours of the Day):")
print(orders_per_hour)

# Visualization
plt.figure(figsize=(14, 7))
plt.subplot(2, 2, 1)
orders_per_day.plot(kind='line', title='Orders Per Day')
plt.subplot(2, 2, 2)
orders_per_week.plot(kind='line', title='Orders Per Week')
plt.subplot(2, 2, 3)
orders_per_month.plot(kind='line', title='Orders Per Month')
plt.subplot(2, 2, 4)
orders_per_hour.plot(kind='bar', title='Peak Ordering Times')
plt.tight_layout()
plt.show()

"""**Average Order Value**

We'll calculate the average order value and the distribution of order values.
"""

# Average order value
average_order_value = orders_list['total'].mean()
print("\nAverage Order Value:", average_order_value)

# Distribution of order values
order_value_distribution = orders_list['total']
print("\nOrder Value Distribution:")
print(order_value_distribution.describe())

# Visualization
plt.figure(figsize=(7, 7))
order_value_distribution.plot(kind='hist', bins=30, title='Distribution of Order Values')
plt.tight_layout()
plt.show()

"""**Orders Data Analysis**

To analyze order frequency, peak times, order value, and payment methods:
"""

import matplotlib.pyplot as plt

# Convert ordered_on to datetime
orders_list['ordered_on'] = pd.to_datetime(orders_list['ordered_on'])

# Orders per day/week/month
orders_per_day = orders_list['ordered_on'].dt.date.value_counts().sort_index()
orders_per_week = orders_list['ordered_on'].dt.to_period('W').value_counts().sort_index()
orders_per_month = orders_list['ordered_on'].dt.to_period('M').value_counts().sort_index()

print("\nOrders Per Day:")
print(orders_per_day)

print("\nOrders Per Week:")
print(orders_per_week)

print("\nOrders Per Month:")
print(orders_per_month)

# Plot orders per month
orders_per_month.plot(kind='bar')
plt.title('Orders Per Month')
plt.xlabel('Month')
plt.ylabel('Number of Orders')
plt.show()

# Peak ordering times/days
peak_order_times = orders_list['ordered_on'].dt.hour.value_counts().sort_index()
peak_order_days = orders_list['ordered_on'].dt.dayofweek.value_counts().sort_index()

print("\nPeak Ordering Times:")
print(peak_order_times)

print("\nPeak Ordering Days:")
print(peak_order_days)

# Average order value
average_order_value = orders_list['total'].mean()
print("\nAverage Order Value:")
print(average_order_value)

# Distribution of order values
orders_list['total'].hist(bins=50)
plt.title('Distribution of Order Values')
plt.xlabel('Order Value')
plt.ylabel('Frequency')
plt.show()

# Most commonly used payment methods
common_payment_methods = orders_list['payment_id'].value_counts()
print("\nMost Commonly Used Payment Methods:")
print(common_payment_methods)

# Percentage of orders that are prepaid vs. COD
prepaid_percentage = (orders_list[orders_list['payment_status'] == 'prepaid'].shape[0] / orders_list.shape[0]) * 100
cod_percentage = (orders_list[orders_list['payment_status'] == 'COD'].shape[0] / orders_list.shape[0]) * 100

print("\nPercentage of Prepaid Orders:")
print(prepaid_percentage)

print("\nPercentage of COD Orders:")
print(cod_percentage)

# Order status analysis
order_status_counts = orders_list['status'].value_counts()
print("\nOrder Status Counts:")
print(order_status_counts)

"""**User Data Analysis**

To analyze user demographics, activity, and referral impact:
"""

# B2C vs. B2B customers breakdown
b2c_b2b_breakdown = user_details['customer_type'].value_counts()
print("\nB2C vs. B2B Customers Breakdown:")
print(b2c_b2b_breakdown)

# New user registrations per month
user_details['created_on'] = pd.to_datetime(user_details['created_on'])
new_users_per_month = user_details['created_on'].dt.to_period('M').value_counts().sort_index()

print("\nNew User Registrations Per Month:")
print(new_users_per_month)

# Plot new user registrations per month
new_users_per_month.plot(kind='bar')
plt.title('New User Registrations Per Month')
plt.xlabel('Month')
plt.ylabel('Number of New Users')
plt.show()

# Frequency of user orders
user_order_frequency = orders_list['user_id'].value_counts().value_counts()
print("\nUser Order Frequency:")
print(user_order_frequency)

# Average time between user registrations and their first order
user_first_order = orders_list.groupby('user_id')['ordered_on'].min().reset_index()
user_first_order.rename(columns={'user_id': 'id', 'ordered_on': 'first_order_date'}, inplace=True)

# Merge user_details with user_first_order
user_details = user_details.merge(user_first_order, on='id', how='left')

# Calculate days to first order
user_details['days_to_first_order'] = (user_details['first_order_date'] - user_details['created_on']).dt.days
average_days_to_first_order = user_details['days_to_first_order'].mean()

print("\nAverage Days to First Order:")
print(average_days_to_first_order)

# Effectiveness of referral programs
referral_effectiveness = user_details['referrer'].notnull().mean() * 100
print("\nEffectiveness of Referral Programs:")
print(referral_effectiveness)

# Percentage of new users from referrals
new_users_from_referrals = user_details[user_details['created_on'].dt.to_period('M') == new_users_per_month.index[-1]]['referrer'].notnull().mean() * 100
print("\nPercentage of New Users from Referrals:")
print(new_users_from_referrals)

"""**Combined Insights**

To analyze customer segmentation, sales trends, and product-user relationships:
"""

# Customer segmentation based on order frequency and value
user_order_summary = orders_list.groupby('user_id').agg({
    'order_id': 'count',
    'total': 'sum'
}).reset_index().rename(columns={'order_id': 'order_count', 'total': 'total_spent'})

print("\nCustomer Segmentation:")
print(user_order_summary.describe())

# Differences in B2B and B2C customer ordering patterns
b2b_users = user_details[user_details['customer_type'] == 'B2B']['id']
b2c_users = user_details[user_details['customer_type'] == 'B2C']['id']

b2b_orders = user_order_summary[user_order_summary['user_id'].isin(b2b_users)]
b2c_orders = user_order_summary[user_order_summary['user_id'].isin(b2c_users)]

print("\nB2B Customer Ordering Patterns:")
print(b2b_orders.describe())
print("\nB2C Customer Ordering Patterns:")
print(b2c_orders.describe())

# Sales trends over time
sales_trends = orders_list.groupby(orders_list['ordered_on'].dt.to_period('M'))['total'].sum()
print("\nSales Trends Over Time:")
print(sales_trends)

# Plot sales trends
sales_trends.plot(kind='line')
plt.title('Sales Trends Over Time')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.show()

# Correlation of sales trends with user registration trends
sales_and_registration_trends = pd.DataFrame({
    'sales': sales_trends,
    'registrations': new_users_per_month
}).fillna(0)

print("\nSales and Registration Trends Correlation:")
print(sales_and_registration_trends.corr())

# Merge orders and items with user details to get customer type information
merged_orders_items = pd.merge(orders_list, items, left_on='order_id', right_on='order_id_fk')
user_order_items = pd.merge(merged_orders_items, user_details[['id', 'customer_type']], left_on='user_id', right_on='id')

# Popular products among B2B customers
popular_products_b2b = user_order_items[user_order_items['customer_type'] == 'B2B']['item_name'].value_counts().head(10)
print("\nPopular Products Among B2B Customers:")
print(popular_products_b2b)

# Popular products among B2C customers
popular_products_b2c = user_order_items[user_order_items['customer_type'] == 'B2C']['item_name'].value_counts().head(10)
print("\nPopular Products Among B2C Customers:")
print(popular_products_b2c)